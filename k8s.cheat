; ------------------------------------------------
; This file contains cheatsheet for kubernetes
; ------------------------------------------------

% kubernetes, pod, image

# Get container image of a pod

kubectl -n <namespace> get pod <pod> -o jsonpath='{.spec.containers[?(@.name=="<container>")].image}'

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ container: kubectl get pod -n <namespace> <pod> --template '{{range .spec.containers}}{{.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, annotation

# Get annotations of a pod

kubectl -n <namespace> get pod <pod> --template '{{range $k,$v :=.metadata.annotations}}{{$k}} => {{$v}}{{"\n"}}{{end}}'

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, label

# Get labels of a pod

kubectl -n <namespace> get pod <pod> --template '{{range $k,$v :=.metadata.labels}}{{$k}} => {{$v}}{{"\n"}}{{end}}'

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, logs

# Show logs of all containers for a pod in given namespace
kubectl logs -n <namespace> <pod> --all-containers

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, logs

# Show logs of a pod in given namespace
kubectl logs -n <namespace> <pod>

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, logs

# Show previous logs of a pod in given namespace
kubectl logs -n <namespace> <pod> --previous

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, logs

# Show logs of a containers of a pod in given namespace
kubectl logs -n <namespace> <pod> -c <container>

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ container: kubectl get pod -n <namespace> <pod> --template '{{range .spec.containers}}{{.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, secret

# Get a kubernetes secret value

kubectl -n <namespace> get secret <secret> -o go-template='{{.data.<data> | base64decode}}'

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ secret: kubectl get secret -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ data: kubectl get secret -n <namespace> <secret-in-namespace> --template '{{range $k,$v := .data}}{{$k}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, requests, limits

# Get container requests and limits for pods on given namespace for kubernetes

kubectl get pods -n <namespace> -o=custom-columns='NAMESPACE:.metadata.namespace,POD_NAME:.metadata.name,CONTAINER_NAME:spec.containers[*].name,MEMREQ:spec.containers[*].resources.requests.memory,MEMLIM:spec.containers[*].resources.limits.memory,CPUREQ:spec.containers[*].resources.requests.cpu,CPULIM:spec.containers[*].resources.limits.cpu' --sort-by=.metadata.namespace --sort-by='.metadata.name'

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'


; ------------------------------------------------

% kubernetes, node, subnet

# Get kubernetes nodes pod subnets

kubectl get nodes -o=custom-columns='NAME:.metadata.name,POD_CIDR:.spec.podCIDR'

; ------------------------------------------------

% kubernetes, pod, delete

# Deletes a pod with grace period 0 on given namespace in a kubernetes cluster

kubectl delete po -n <namespace> <pod> --grace-period 0

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, curl, sh

# Creates a curl container and attaches to sh process in kubernetes

kubectl run -i --tty curl -n <namespace> --image=enterprisecodingcom/curl --rm -- sh

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, ldap, sh

# Creates a container with openldap-clients installed and attaches to sh process in kubernetes

kubectl run -i --tty openldap-clients -n <namespace> --image=quay.io/enterprisecoding/openldap-clients --rm --command -- sh

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, dns, sh

# Creates a container with dns utilities and attaches to sh process in kubernetes

kubectl run -i --tty dns -n <namespace> --image=enterprisecodingcom/dnsutils:latest -- sh

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, shell

# starts a shell process in given pod

kubectl exec --stdin --tty -n <namespace> <pod> -c <container> -- <shell>

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ container: kubectl get pod -n <namespace> <pod> --template '{{range .spec.containers}}{{.name}}{{"\n"}}{{end}}'
$ shell: echo 'sh bash' | tr ' ' '\n'

; ------------------------------------------------

% kubernetes, pod, busybox, sh

# Creates a busybox container and attaches to sh process in kubernetes

kubectl run -i --tty busybox -n <namespace> --image=busybox -- sh

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, evicted

# Deletes evicted pods on all namespaces

kubectl get pods --all-namespaces -o go-template='{{range .items}}{{if eq .status.phase "Failed"}}{{if eq .status.reason "Evicted"}}{{.metadata.name}}{{" "}}{{.metadata.namespace}}{{"\n"}}{{end}}{{end}}{{end}}' | while read epod enamespace; do kubectl -n $enamespace delete pod $epod; done

; ------------------------------------------------

% kubernetes, pod, evicted

# Deletes evicted pods on given namespace

kubectl get pods -n <namespace> -o go-template='{{range .items}}{{if eq .status.phase "Failed"}}{{if eq .status.reason "Evicted"}}{{.metadata.name}}{{" "}}{{.metadata.namespace}}{{"\n"}}{{end}}{{end}}{{end}}' | while read epod enamespace; do kubectl -n $enamespace delete pod $epod; done

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, crashloopbackoff

# Deletes CrashLoopBackOff pods on all namespaces

kubectl get pods -A -o json |  jq '.items[] | select(.status.containerStatuses[].state.waiting.reason!=null) | select(.status.containerStatuses[].state.waiting.reason | contains("CrashLoopBackOff")) | "kubectl delete pods \(.metadata.name) -n \(.metadata.namespace)"' | xargs -n 1 bash -c

; ------------------------------------------------

% kubernetes, pod, crashloopbackoff

# Deletes CrashLoopBackOff pods on given namespace

kubectl get pods -n <namespace> -o json |  jq '.items[] | select(.status.containerStatuses[].state.waiting.reason!=null) | select(.status.containerStatuses[].state.waiting.reason | contains("CrashLoopBackOff")) | "kubectl delete pods \(.metadata.name) -n \(.metadata.namespace)"' | xargs -n 1 bash -c

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, limits, requests

# List pod's limits and requests on a given namespace

kubectl get pods -n <namespace> -o=custom-columns='NAME:spec.containers[*].name,MEMREQ:spec.containers[*].resources.requests.memory,MEMLIM:spec.containers[*].resources.limits.memory,CPUREQ:spec.containers[*].resources.requests.cpu,CPULIM:spec.containers[*].resources.limits.cpu'

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, node, memorypressure, diskpressure, pidressure

# List nodes with MemoryPressure, DiskPressure, PIDPressure columns

kubectl get nodes -o custom-columns="Name:.metadata.name,InternalIP:.status.addresses[0].address,MemoryPressure:.status.conditions[0].status,DiskPressure:.status.conditions[1].status,PIDPressure:.status.conditions[2].status,Ready:.status.conditions[3].status"

; ------------------------------------------------

% kubernetes, deployment, image

# Change image of a container in a deployment

kubectl set image deployment <deployment> -n <namespace> <container>=<image>

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ deployment: kubectl get deployment -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ container: kubectl get deployment -n <namespace> <deployment> --template '{{range .spec.template.spec.containers}}{{.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, crd, all

# List all crd's in a given namespace

kubectl api-resources --verbs=list --namespaced -o name | xargs -n 1 kubectl get --show-kind --ignore-not-found -n <namespace>

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, secret, decode

# Decode all fields of a secret in a given namespace

kubectl get secret <secret> -n <namespace> -o go-template='{{range $k,$v := .data}}{{printf "%s: " $k}}{{if not $v}}{{$v}}{{else}}{{$v | base64decode}}{{end}}{{"\n"}}{{end}}'

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ secret: kubectl get secret -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, secret, decode

# Decode a secret value in a given namespace

kubectl get secrets <secret> -n <namespace> --template="{{index .data \"<field>\" | base64decode}}"

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ secret: kubectl get secret -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ field: kubectl get secret <secret> -n <namespace> -o go-template='{{range $k,$v := .data}}{{printf "%s" $k}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, container, image

# List all container images in all namespaces

kubectl get pods --all-namespaces -o jsonpath="{.items[*].spec.containers[*].image}" | tr -s '[[:space:]]' '\n' | sort | uniq -c

; ------------------------------------------------

% kubernetes, node, pod, shell

# Shell access to given node

kubectl run nsenter --restart=Never -it --rm --image overriden --overrides '
{
  "spec": {
    "hostPID": true,
    "hostNetwork": true,
    "nodeSelector": { "kubernetes.io/hostname": "<node>" },
    "tolerations": [{
        "operator": "Exists"
    }],
    "containers": [
      {
        "name": "nsenter",
        "image": "alpine",
        "command": [
          "/usr/bin/nsenter", "--target=1", "--", "su", "-"
        ],
        "stdin": true,
        "tty": true,
        "securityContext": {
          "privileged": true
        }
      }
    ]
  }
}' --attach "$@"

$ node: kubectl get node --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, node, condition

# Get node conditions

kubectl get nodes -o go-template='{{range .items}}{{$node := .}}{{range .status.conditions}}{{$node.metadata.name}}{{": "}}{{.type}}{{":"}}{{.status}}{{"\n"}}{{end}}{{end}}'

; ------------------------------------------------

% kubernetes, node, condition

# Get node conditions that are active that could prevent normal operation

kubectl get nodes -o go-template='{{range .items}}{{$node := .}}{{range .status.conditions}}{{if ne .type "Ready"}}{{if eq .status "True"}}{{$node.metadata.name}}{{": "}}{{.type}}{{":"}}{{.status}}{{"\n"}}{{end}}{{else}}{{if ne .status "True"}}{{$node.metadata.name}}{{": "}}{{.type}}{{": "}}{{.status}}{{"\n"}}{{end}}{{end}}{{end}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, file, copy

# Copy file from pod

kubectl cp <namespace>/<pod>:<source> <target>

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, container, file, copy

# Copy file from container in the pod

kubectl cp <namespace>/<pod>:<source> <target> -c <container>

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ container: kubectl get pod -n <namespace> <pod> --template '{{range .spec.containers}}{{.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, ready, jq

# List the pods that are not ready in a given namespace

kubectl -n <namespace> get pods -ojson | jq '.items[].status.containerStatuses | select(.[].ready == false) | .metadata.name'

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, memory

# List the pods ordered by memory usage

kubectl top pods -A --sort-by="memory"

; ------------------------------------------------

% kubernetes, expose, service, pod, service, replicationcontroller, deployment, replicaset

# Exposes given Kubernetes resource

kubectl expose <resource> -n <namespace> <resource-name> --type=<service-type> --name=<name>

$ resource: echo "pod service replicationcontroller deployment replicaset" | tr ' ' '\n'
$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ resource-name: kubectl get <resource> -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ service-type: echo "ClusterIP NodePort LoadBalancer ExternalName" | tr ' ' '\n'

; ------------------------------------------------

% kubernetes, cpu, memory, pod, resource, limit

# List All pods in cluster order by CPU and memory limits

kubectl get pods -A -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.containers[].resources.limits.cpu}{"\t"}{.spec.containers[].resources.limits.memory}{"\n"}{end}' | sort -k2,2

; ------------------------------------------------

% kubernetes, cpu, memory, pod, resource, limit

# List All pods in a given namespace order by CPU and memory limits

kubectl get pods -n <namespace> -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.containers[].resources.limits.cpu}{"\t"}{.spec.containers[].resources.limits.memory}{"\n"}{end}' | sort -k2,2

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'