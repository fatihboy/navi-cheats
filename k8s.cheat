; ------------------------------------------------
; This file contains cheatsheet for kubernetes
; ------------------------------------------------

% kubernetes, pod, image

# Get container image of a pod

kubectl -n <namespace> get pod <pod> -o jsonpath='{.spec.containers[?(@.name=="<container>")].image}'

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ container: kubectl get pod -n <namespace> <pod> --template '{{range .spec.containers}}{{.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, annotation

# Get annotations of a pod

kubectl -n <namespace> get pod <pod> --template '{{range $k,$v :=.metadata.annotations}}{{$k}} => {{$v}}{{"\n"}}{{end}}'

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, label

# Get labels of a pod

kubectl -n <namespace> get pod <pod> --template '{{range $k,$v :=.metadata.labels}}{{$k}} => {{$v}}{{"\n"}}{{end}}'

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, logs

# Show logs of all containers for a pod in given namespace
kubectl logs -n <namespace> <pod> --all-containers

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, logs

# Show logs of a pod in given namespace
kubectl logs -n <namespace> <pod>

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, logs

# Show previous logs of a pod in given namespace
kubectl logs -n <namespace> <pod> --previous

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, logs

# Show logs of a containers of a pod in given namespace
kubectl logs -n <namespace> <pod> -c <container>

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ container: kubectl get pod -n <namespace> <pod> --template '{{range .spec.containers}}{{.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, secret

# Get a kubernetes secret value

kubectl -n <namespace> get secret <secret> -o go-template='{{.data.<data> | base64decode}}'

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ secret: kubectl get secret -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ data: kubectl get secret -n <namespace> <secret-in-namespace> --template '{{range $k,$v := .data}}{{$k}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, requests, limits

# Get container requests and limits for pods on given namespace for kubernetes

kubectl get pods -n <namespace> -o=custom-columns='NAMESPACE:.metadata.namespace,POD_NAME:.metadata.name,CONTAINER_NAME:spec.containers[*].name,MEMREQ:spec.containers[*].resources.requests.memory,MEMLIM:spec.containers[*].resources.limits.memory,CPUREQ:spec.containers[*].resources.requests.cpu,CPULIM:spec.containers[*].resources.limits.cpu' --sort-by=.metadata.namespace --sort-by='.metadata.name'

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'


; ------------------------------------------------

% kubernetes, node, subnet

# Get kubernetes nodes pod subnets

kubectl get nodes -o=custom-columns='NAME:.metadata.name,POD_CIDR:.spec.podCIDR'

; ------------------------------------------------

% kubernetes, pod, delete

# Deletes a pod with grace period 0 on given namespace in a kubernetes cluster

kubectl delete po -n <namespace> <pod> --grace-period 0

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, curl, sh

# Creates a curl container and attaches to sh process in kubernetes

kubectl run -i --tty curl -n <namespace> --image=enterprisecodingcom/curl -- sh

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, shell

# starts a shell process in given pod

kubectl exec --stdin --tty -n <namespace> <pod> -c <container> -- <shell>

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ pod: kubectl get pods -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ container: kubectl get pod -n <namespace> <pod> --template '{{range .spec.containers}}{{.name}}{{"\n"}}{{end}}'
$ shell: echo 'sh bash' | tr ' ' '\n'

; ------------------------------------------------

% kubernetes, pod, busybox, sh

# Creates a busybox container and attaches to sh process in kubernetes

kubectl run -i --tty busybox -n <namespace> --image=busybox -- sh

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, evicted

# Deletes evicted pods on all namespaces

kubectl get pods --all-namespaces -o json | jq '.items[] | select(.status.reason!=null) | select(.status.reason | contains("Evicted")) | "kubectl delete pods \(.metadata.name) -n \(.metadata.namespace)"' | xargs -n 1 bash -c 

; ------------------------------------------------

% kubernetes, pod, evicted

# Deletes evicted pods on given namespace

kubectl get pods -n <namespace> -o json | jq '.items[] | select(.status.reason!=null) | select(.status.reason | contains("Evicted")) | "kubectl delete pods \(.metadata.name) -n \(.metadata.namespace)"' | xargs -n 1 bash -c 

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, pod, limits, requests

# List pod's limits and requests on a given namespace

kubectl get pods -n <namespace> -o=custom-columns='NAME:spec.containers[*].name,MEMREQ:spec.containers[*].resources.requests.memory,MEMLIM:spec.containers[*].resources.limits.memory,CPUREQ:spec.containers[*].resources.requests.cpu,CPULIM:spec.containers[*].resources.limits.cpu'

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'

; ------------------------------------------------

% kubernetes, node, memorypressure, diskpressure, pidressure

# List nodes with MemoryPressure, DiskPressure, PIDPressure columns

kubectl get nodes -o custom-columns="Name:.metadata.name,InternalIP:.status.addresses[0].address,MemoryPressure:.status.conditions[0].status,DiskPressure:.status.conditions[1].status,PIDPressure:.status.conditions[2].status,Ready:.status.conditions[3].status"

; ------------------------------------------------

% kubernetes, deployment, image

# Change image of a container in a deployment

kubectl set image deployment <deployment> -n <namespace> <container>=<image>

$ namespace: kubectl get ns --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ deployment: kubectl get deployment -n <namespace> --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'
$ container: kubectl get deployment -n <namespace> <deployment> --template '{{range .spec.containers}}{{.name}}{{"\n"}}{{end}}'
